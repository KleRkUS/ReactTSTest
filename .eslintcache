[{"D:\\Влад\\work\\sites\\Rocket\\test\\src\\index.tsx":"1","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Components\\Dashboard\\index.tsx":"2","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Modules\\Api.ts":"3","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Components\\Dashboard\\Componets\\Post.tsx":"4","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Modules\\Interfaces.ts":"5","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Styles\\Common.tsx":"6","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Styles\\Post.tsx":"7","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Components\\Dashboard\\Componets\\Pagination.tsx":"8","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Styles\\Pagination.tsx":"9","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Components\\Dashboard\\Componets\\Filter.tsx":"10","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Styles\\Filter.tsx":"11"},{"size":285,"mtime":1610474075807,"results":"12","hashOfConfig":"13"},{"size":3089,"mtime":1610482761443,"results":"14","hashOfConfig":"13"},{"size":1535,"mtime":1610462400831,"results":"15","hashOfConfig":"13"},{"size":1398,"mtime":1610483934317,"results":"16","hashOfConfig":"13"},{"size":506,"mtime":1610462390197,"results":"17","hashOfConfig":"13"},{"size":825,"mtime":1610483893511,"results":"18","hashOfConfig":"13"},{"size":957,"mtime":1610484129366,"results":"19","hashOfConfig":"13"},{"size":2073,"mtime":1610479580035,"results":"20","hashOfConfig":"13"},{"size":871,"mtime":1610483767793,"results":"21","hashOfConfig":"13"},{"size":597,"mtime":1610481852503,"results":"22","hashOfConfig":"13"},{"size":515,"mtime":1610483790153,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"obbxr7",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\Влад\\work\\sites\\Rocket\\test\\src\\index.tsx",[],["49","50"],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Components\\Dashboard\\index.tsx",["51"],"import React, {useEffect, useState} from \"react\";\r\n\r\nimport {getData} from \"../../Modules/Api\";\r\nimport {FetchData} from \"../../Modules/Interfaces\";\r\nimport {MainSection, Spinner, SpinnerInner} from \"../../Styles/Common\";\r\n\r\nimport Post from \"./Componets/Post\";\r\nimport Pagination from \"./Componets/Pagination\";\r\nimport {Filter} from \"./Componets/Filter\";\r\n\r\nconst Dashboard = () => {\r\n    const [allPosts, setPosts] = useState<Array<FetchData>>([]),\r\n          [allUsers, setUsers] = useState<Array<FetchData>>([]),\r\n          [loaded, setLoaded] = useState<boolean>(false),\r\n          [filter, setFilter] = useState<string>(''),\r\n          //Здесь представим что у нас может быть очень много постов и запрос к API это pageable\r\n          [page, setPage] = useState<number>(0);\r\n\r\n    const fetchData = async () => {\r\n\r\n        //Но запрос сразу возвращает всё и pageable так и останется TODO украшательством\r\n        const data = await getData();\r\n\r\n        if (data.status) {\r\n            setPosts(data.posts);\r\n            setUsers(data.users);\r\n        } else {\r\n            alert(`Something went wrong, got error: ${JSON.stringify(data.reason)}`)\r\n        }\r\n\r\n        setLoaded(true);\r\n    }\r\n\r\n    const applyFilter = () => {\r\n        if (filter.length === 0) {\r\n            return allPosts;\r\n        }\r\n\r\n        return allPosts.filter(post => post.title?.indexOf(filter) !== -1);\r\n    }\r\n\r\n    const getPosts = () => {\r\n        const filteredPosts = applyFilter();\r\n        return {\r\n            posts: filteredPosts.slice(page*20, (page+1) * 20),\r\n            globalAmount: Math.ceil(filteredPosts.length/20)\r\n        };\r\n    }\r\n\r\n    const changePage = (page:number):void => {\r\n        setPage(page)\r\n    }\r\n\r\n    const currentPosts = getPosts();\r\n\r\n    useEffect(() => {\r\n        if (allPosts.length === 0 || allUsers.length === 0) {\r\n            fetchData();\r\n        }\r\n    }, []);\r\n\r\n    if (!loaded) {\r\n\r\n        return <Spinner>\r\n                 <SpinnerInner>&lt;&gt;</SpinnerInner>\r\n               </Spinner>\r\n\r\n    } else {\r\n\r\n        return (\r\n            <div>\r\n                <Filter onChange={setFilter}/>\r\n\r\n                <Pagination\r\n                    currentPage={page}\r\n                    amountOfPages={currentPosts.globalAmount}\r\n                    changePage={changePage}\r\n                />\r\n\r\n                <MainSection className=\"lol\">\r\n                    {currentPosts.posts.map(post => <Post\r\n                        user={allUsers.filter(elem => elem.id === post.userId)[0]}\r\n                        key={post.id}\r\n                        index={post.id}\r\n                        postData={post}\r\n                    />)}\r\n                </MainSection>\r\n\r\n                <Pagination\r\n                    currentPage={page}\r\n                    amountOfPages={currentPosts.globalAmount}\r\n                    changePage={changePage}\r\n                />\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","D:\\Влад\\work\\sites\\Rocket\\test\\src\\Modules\\Api.ts",[],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Components\\Dashboard\\Componets\\Post.tsx",[],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Modules\\Interfaces.ts",[],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Styles\\Common.tsx",[],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Styles\\Post.tsx",[],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Components\\Dashboard\\Componets\\Pagination.tsx",[],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Styles\\Pagination.tsx",[],["52","53"],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Components\\Dashboard\\Componets\\Filter.tsx",[],"D:\\Влад\\work\\sites\\Rocket\\test\\src\\Styles\\Filter.tsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":60,"column":8,"nodeType":"60","endLine":60,"endColumn":10,"suggestions":"61"},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allPosts.length' and 'allUsers.length'. Either include them or remove the dependency array.","ArrayExpression",["66"],["64"],["65"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [allPosts.length, allUsers.length]",{"range":"69","text":"70"},[1892,1894],"[allPosts.length, allUsers.length]"]